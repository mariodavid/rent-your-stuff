package de.diedavids.jmix.rys.product;

import java.util.Objects;
import org.assertj.core.api.AbstractObjectAssert;

/**
 * {@link ProductPrice} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ProductPriceAssert extends AbstractObjectAssert<ProductPriceAssert, ProductPrice> {

  /**
   * Creates a new <code>{@link ProductPriceAssert}</code> to make assertions on actual ProductPrice.
   * @param actual the ProductPrice we want to make assertions on.
   */
  public ProductPriceAssert(ProductPrice actual) {
    super(actual, ProductPriceAssert.class);
  }

  /**
   * An entry point for ProductPriceAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myProductPrice)</code> and get specific assertion with code completion.
   * @param actual the ProductPrice we want to make assertions on.
   * @return a new <code>{@link ProductPriceAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ProductPriceAssert assertThat(ProductPrice actual) {
    return new ProductPriceAssert(actual);
  }

  /**
   * Verifies that the actual ProductPrice's createdBy is equal to the given one.
   * @param createdBy the given createdBy to compare the actual ProductPrice's createdBy to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductPrice's createdBy is not equal to the given one.
   */
  public ProductPriceAssert hasCreatedBy(String createdBy) {
    // check that actual ProductPrice we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting createdBy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCreatedBy = actual.getCreatedBy();
    if (!Objects.deepEquals(actualCreatedBy, createdBy)) {
      failWithMessage(assertjErrorMessage, actual, createdBy, actualCreatedBy);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductPrice's createdDate is equal to the given one.
   * @param createdDate the given createdDate to compare the actual ProductPrice's createdDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductPrice's createdDate is not equal to the given one.
   */
  public ProductPriceAssert hasCreatedDate(java.util.Date createdDate) {
    // check that actual ProductPrice we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting createdDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Date actualCreatedDate = actual.getCreatedDate();
    if (!Objects.deepEquals(actualCreatedDate, createdDate)) {
      failWithMessage(assertjErrorMessage, actual, createdDate, actualCreatedDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductPrice's deletedBy is equal to the given one.
   * @param deletedBy the given deletedBy to compare the actual ProductPrice's deletedBy to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductPrice's deletedBy is not equal to the given one.
   */
  public ProductPriceAssert hasDeletedBy(String deletedBy) {
    // check that actual ProductPrice we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting deletedBy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDeletedBy = actual.getDeletedBy();
    if (!Objects.deepEquals(actualDeletedBy, deletedBy)) {
      failWithMessage(assertjErrorMessage, actual, deletedBy, actualDeletedBy);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductPrice's deletedDate is equal to the given one.
   * @param deletedDate the given deletedDate to compare the actual ProductPrice's deletedDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductPrice's deletedDate is not equal to the given one.
   */
  public ProductPriceAssert hasDeletedDate(java.util.Date deletedDate) {
    // check that actual ProductPrice we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting deletedDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Date actualDeletedDate = actual.getDeletedDate();
    if (!Objects.deepEquals(actualDeletedDate, deletedDate)) {
      failWithMessage(assertjErrorMessage, actual, deletedDate, actualDeletedDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductPrice's id is equal to the given one.
   * @param id the given id to compare the actual ProductPrice's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductPrice's id is not equal to the given one.
   */
  public ProductPriceAssert hasId(java.util.UUID id) {
    // check that actual ProductPrice we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.UUID actualId = actual.getId();
    if (!Objects.deepEquals(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductPrice's instanceName is equal to the given one.
   * @param instanceName the given instanceName to compare the actual ProductPrice's instanceName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductPrice's instanceName is not equal to the given one.
   */
  public ProductPriceAssert hasInstanceName(String instanceName) {
    // check that actual ProductPrice we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting instanceName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualInstanceName = actual.getInstanceName();
    if (!Objects.deepEquals(actualInstanceName, instanceName)) {
      failWithMessage(assertjErrorMessage, actual, instanceName, actualInstanceName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductPrice's lastModifiedBy is equal to the given one.
   * @param lastModifiedBy the given lastModifiedBy to compare the actual ProductPrice's lastModifiedBy to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductPrice's lastModifiedBy is not equal to the given one.
   */
  public ProductPriceAssert hasLastModifiedBy(String lastModifiedBy) {
    // check that actual ProductPrice we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting lastModifiedBy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualLastModifiedBy = actual.getLastModifiedBy();
    if (!Objects.deepEquals(actualLastModifiedBy, lastModifiedBy)) {
      failWithMessage(assertjErrorMessage, actual, lastModifiedBy, actualLastModifiedBy);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductPrice's lastModifiedDate is equal to the given one.
   * @param lastModifiedDate the given lastModifiedDate to compare the actual ProductPrice's lastModifiedDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductPrice's lastModifiedDate is not equal to the given one.
   */
  public ProductPriceAssert hasLastModifiedDate(java.util.Date lastModifiedDate) {
    // check that actual ProductPrice we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting lastModifiedDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Date actualLastModifiedDate = actual.getLastModifiedDate();
    if (!Objects.deepEquals(actualLastModifiedDate, lastModifiedDate)) {
      failWithMessage(assertjErrorMessage, actual, lastModifiedDate, actualLastModifiedDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductPrice's price is equal to the given one.
   * @param price the given price to compare the actual ProductPrice's price to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductPrice's price is not equal to the given one.
   */
  public ProductPriceAssert hasPrice(de.diedavids.jmix.rys.entity.Money price) {
    // check that actual ProductPrice we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting price of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    de.diedavids.jmix.rys.entity.Money actualPrice = actual.getPrice();
    if (!Objects.deepEquals(actualPrice, price)) {
      failWithMessage(assertjErrorMessage, actual, price, actualPrice);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductPrice's product is equal to the given one.
   * @param product the given product to compare the actual ProductPrice's product to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductPrice's product is not equal to the given one.
   */
  public ProductPriceAssert hasProduct(Product product) {
    // check that actual ProductPrice we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting product of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Product actualProduct = actual.getProduct();
    if (!Objects.deepEquals(actualProduct, product)) {
      failWithMessage(assertjErrorMessage, actual, product, actualProduct);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductPrice's tenant is equal to the given one.
   * @param tenant the given tenant to compare the actual ProductPrice's tenant to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductPrice's tenant is not equal to the given one.
   */
  public ProductPriceAssert hasTenant(String tenant) {
    // check that actual ProductPrice we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting tenant of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTenant = actual.getTenant();
    if (!Objects.deepEquals(actualTenant, tenant)) {
      failWithMessage(assertjErrorMessage, actual, tenant, actualTenant);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductPrice's unit is equal to the given one.
   * @param unit the given unit to compare the actual ProductPrice's unit to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductPrice's unit is not equal to the given one.
   */
  public ProductPriceAssert hasUnit(PriceUnit unit) {
    // check that actual ProductPrice we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting unit of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    PriceUnit actualUnit = actual.getUnit();
    if (!Objects.deepEquals(actualUnit, unit)) {
      failWithMessage(assertjErrorMessage, actual, unit, actualUnit);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductPrice's version is equal to the given one.
   * @param version the given version to compare the actual ProductPrice's version to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductPrice's version is not equal to the given one.
   */
  public ProductPriceAssert hasVersion(Integer version) {
    // check that actual ProductPrice we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting version of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualVersion = actual.getVersion();
    if (!Objects.deepEquals(actualVersion, version)) {
      failWithMessage(assertjErrorMessage, actual, version, actualVersion);
    }

    // return the current assertion for method chaining
    return this;
  }

}
